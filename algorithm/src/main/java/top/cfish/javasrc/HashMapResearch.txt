// 结论（有些并未在梳理体现）
// 1、序列化，只存储了数组的容量、实际节点数量和各个节点的key、value值
// 2、扩容的条件，实际节点数大于等于容量的四分之三；扩容后数据排布，要么是原下标的位置，要么是原下标+原容量的位置
// 3、插入冲突，通过单链表解决冲突，如果链表长度超过（TREEIFY_THRESHOLD=8），进行单链表和红黑树的转换以提高查询速度


// 默认初始容量
// 1 << 4 = 0001 0000 --> 16
// 必须是2的次幂
// 1、移位运算，提高速度
// 2、内存对齐，减少碎片
// 3、tab[i = (n - 1) & hash]，增加散列度
static final int DEFAULT_INITIAL_CAPACITY = 1 << 4;

// 最大空间大小，符号位0，2^30
static final int MAXIMUM_CAPACITY = 1 << 30;

// 默认负载因子
static final float DEFAULT_LOAD_FACTOR = 0.75f;

// 链表转为红黑树元素个数
static final int TREEIFY_THRESHOLD = 8;

// TODO
static final int MIN_TREEIFY_CAPACITY = 64;

// 单链表结点
static class Node<K,V>
{
    final int hash;
    final K key;
    V value;

    Node<K, V> next;
}

// 顺序表经典结构
transient Node<K,V>[] table;

// 键值映射数量
transient int size;

transient int modCount;

int threshold;

// 负载因子
final float loadFactor;

public HashMap(int initialCapacity)
{
    this(initialCapacity, DEFAULT_LOAD_FACTOR);
}

public HashMap()
{
    this.loadFactor = DEFAULT_LOAD_FACTOR;
}

// 对key的hashCode进行高16位与低16位异或，降低hash冲突
static final int hash(Object key)
{
    int h;
    return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);
}

// 返回一个给定目标容量大小的2次幂
// tableSizeFor(3) = 4，tableSizeFor(14) = 16
static final int tableSizeFor(int cap)
{
    int n = cap - 1;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    return (n < 0) ? 1 : (n >= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;
}

public V get(Object key)
{
    Node<K,V> e;
    return (e = getNode(hash(key), key)) == null ? null : e.value;
}

final Node<K,V> getNode(int hash, Object key)
{
    Node<K,V>[] tab;
    Node<K,V> first, e;
    int n;
    K k;
    if ((tab = table) != null && (n = tab.length) > 0 && (first = tab[(n - 1) & hash]) != null)
    {
        // 纵向查找
        if (first.hash == hash && ((k = first.key) == key || (key != null && key.equals(k))))
        {
            return first;
        }
        // 横向查找
        if ((e = first.next) != null)
        {
            if (first instanceof TreeNode)
            {
                return ((TreeNode<K,V>)first).getTreeNode(hash, key);
            }
            do
            {
                if (e.hash == hash && ((k = e.key) == key || (key != null && key.equals(k))))
                {
                    return e;
                }
            } while ((e = e.next) != null);
        }
    }
    return null;
}

public V put(K key, V value)
{
    // 对key的hashCode高低16位异或求hash
    return putVal(hash(key), key, value, false, true);
}

final V putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict)
{
    // 未初始化，默认为null和0
    Node<K,V>[] tab;
    Node<K,V> p;
    int n;
    int i;

    // 第一次进入进行resize
    if ((tab = table) == null || (n = tab.length) == 0)
    {
        // n = newTable.length = 16
        n = (tab = resize()).length;
    }
    // (16-1) & hash算数组下标，并赋值给i
    // 如果数组该结点没有数据
    if ((p = tab[i = (n - 1) & hash]) == null)
    {
        // new新结点，并加入数组
        tab[i] = newNode(hash, key, value, null);
    }
    // 数组该存在数据
    else
    {
        Node<K,V> e; K k;
        if (p.hash == hash && ((k = p.key) == key || (key != null && key.equals(k))))
        {
            e = p;
        }
        else if (p instanceof TreeNode)
        {
            e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);
        }
        else
        {
            for (int binCount = 0; ; ++binCount)
            {
                if ((e = p.next) == null)
                {
                    p.next = newNode(hash, key, value, null);
                    if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st
                    {
                        treeifyBin(tab, hash);
                    }
                    break;
                }
                if (e.hash == hash && ((k = e.key) == key || (key != null && key.equals(k))))
                {
                    break;
                }
                p = e;
            }
        }
        if (e != null)
        {
            // existing mapping for key
            V oldValue = e.value;
            if (!onlyIfAbsent || oldValue == null)
            {
                e.value = value;
            }
            afterNodeAccess(e);
            return oldValue;
        }
    }
    // 有效元素个数
    ++modCount;
    // 如果size 超过 16 * 0.75 = 12，则resize
    if (++size > threshold)
    {
        resize();
    }
    // 该方法为空方法体
    afterNodeInsertion(evict);

    // 如果是新插入，返回null；如果是替换key，则会返回oldValue
    return null;
}

final Node<K,V>[] resize()
{
    // 第一次进入，oldTab和table都为null
    Node<K,V>[] oldTab = table;
    int oldCap = (oldTab == null) ? 0 : oldTab.length;
    int oldThr = threshold;
    int newCap;
    int newThr = 0;

    // 如果table.length不为0（已分配空间）
    if (oldCap > 0)
    {
        // 如果已经分配到最大空间
        if (oldCap >= MAXIMUM_CAPACITY)
        {
            threshold = Integer.MAX_VALUE;
            return oldTab;
        }
        // newCapacity = oldCapacity * 2
        else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY && oldCap >= DEFAULT_INITIAL_CAPACITY)
        {
            newThr = oldThr << 1;
        }
    }
    else if (oldThr > 0)
    {
        // initial capacity was placed in threshold
        newCap = oldThr;
    }
    else
    {
        // zero initial threshold signifies using defaults
        // capacity = 16
        newCap = DEFAULT_INITIAL_CAPACITY;
        // 12 = 0.75 * 16
        newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);
    }
    if (newThr == 0)
    {
        float ft = (float)newCap * loadFactor;
        newThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ? (int)ft : Integer.MAX_VALUE);
    }
    // 根据12分配空间，并赋值给table
    threshold = newThr;
    @SuppressWarnings({"rawtypes","unchecked"})
    Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];

    // table来自新空间赋值
    table = newTab;

    // 如果存在旧空间
    if (oldTab != null)
    {
        // 根据老空间大小遍历
        for (int j = 0; j < oldCap; ++j)
        {
            Node<K,V> e;
            // 获取数组中不为null的结点（存在数据）
            if ((e = oldTab[j]) != null)
            {
                // GC
                oldTab[j] = null;
                // 未建立链表
                if (e.next == null)
                {
                    // 放入新空间
                    newTab[e.hash & (newCap - 1)] = e;
                }
                // 判断是否红黑蛇
                else if (e instanceof TreeNode)
                {
                    ((TreeNode<K,V>)e).split(this, newTab, j, oldCap);
                }
                // 链表
                else
                {
                    // preserve order
                    Node<K,V> loHead = null, loTail = null;
                    Node<K,V> hiHead = null, hiTail = null;
                    Node<K,V> next;
                    do
                    {
                        next = e.next;
                        if ((e.hash & oldCap) == 0)
                        {
                            if (loTail == null)
                            {
                                loHead = e;
                            }
                            else
                            {
                                loTail.next = e;
                            }
                            loTail = e;
                        }
                        else
                        {
                            if (hiTail == null)
                            {
                                hiHead = e;
                            }
                            else
                            {
                                hiTail.next = e;
                            }
                            hiTail = e;
                        }
                    } while ((e = next) != null);
                    if (loTail != null)
                    {
                        loTail.next = null;
                        newTab[j] = loHead;
                    }
                    if (hiTail != null)
                    {
                        hiTail.next = null;
                        newTab[j + oldCap] = hiHead;
                    }
                }
            }
        }
    }
    // 返回新空间
    return newTab;
}

public void clear()
{
    Node<K,V>[] tab;
    modCount++;
    if ((tab = table) != null && size > 0)
    {
        size = 0;
        for (int i = 0; i < tab.length; ++i)
        {
            // GC
            tab[i] = null;
        }
    }
}
